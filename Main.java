import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class Main {
    static ArrayList<String[] > orders = new ArrayList<>();

    //First i saved the data in a file named dataSet.txt. In this main section, i tried to read the file row-wise
    //and split the content of row by "," and save the data in a String array which at the end got pushed to ArrayList<String[]>

    public static void main(String[] args) {
      try {
          File file = new File("C:\\Users\\ritik\\Desktop\\dataSet.txt");
          FileReader fr = new FileReader(file);
          BufferedReader br = new BufferedReader(fr);
          String line = "";
          String[] str = new String[5];
          while ((line = br.readLine()) != null) {
              str = line.split(",");
              orders.add(str);
          }
          fr.close();
      }catch (IOException e){
          e.printStackTrace();
      }
          totalSales(orders);
        System.out.println("********************************************");
          monthWiseTotalSales(orders);
        System.out.println("*********************************************");
            mostPopularItem(orders);
        System.out.println("**********************************************");
            mostRevenuePerMonth(orders);
        System.out.println("***********************************************");
            MinMaxAvg(orders);

    }

    //Total sales in terms of revenue
    // Sales revenue is generated by multiplying the number of a product sold by the sales amount using the formula:
    // Sales Revenue = Units Sold x Sales Price.
    //Total Sales = Total money generated = sum of all total prices

    static void totalSales(ArrayList<String[]> orders){
        int totalSales=0;
        for(int i=0;i<orders.size();i++){
            totalSales += Integer.parseInt(orders.get(i)[4]);
        }
        System.out.println("Total sales: Rs."+totalSales);
    }


    //monthWiseTotalSales calculated on the basis of total quantity sold
    //In this section i used a hashMap in which key is month which corresponds to total sales in that particular month
    static void monthWiseTotalSales(ArrayList<String[]> orders){
        String[] month = new String[3];
        HashMap<String,Integer> monthWise = new HashMap<>();
        for(int i=0;i<orders.size();i++){
            month = orders.get(i)[0].split("-");
            if(monthWise.containsKey(month[1])){
                monthWise.put(month[1], monthWise.get(month[1]) + Integer.parseInt(orders.get(i)[3]));
            }
            else{
                monthWise.put(month[1],Integer.parseInt(orders.get(i)[3]));
            }
        }
        for (Map.Entry<String, Integer> val : monthWise.entrySet()) {
            if(val.getKey().equals("01"))
                System.out.println("Total Sales in January " + "-->" + ": " + val.getValue() + " units");
            else if(val.getKey().equals("02"))
                System.out.println("Total Sales in February " + "-->" + ": " + val.getValue() + "units");
            else if(val.getKey().equals("03"))
                System.out.println("Total Sales in March " + "-->" + ": " + val.getValue() + "units");
        }
    }

    //Most popular item each month calculated on the basis of quantity

    static void mostPopularItem(ArrayList<String[]> orders){
        String[] str = new String[3];
        HashMap<String,Integer> item = new HashMap<String, Integer>();
        String key ="";
        for(int i=0;i<orders.size();i++){
            //Below i try to create a key which contains both month and name of product seperated by a "-"
            //Example: "01-Death by chocolate"
            //That will help in getting access of month and product at same time

            str = orders.get(i)[0].split("-");
            key += str[1];
            key += "-";
            key += orders.get(i)[1];


            if(item.containsKey(key)){
                item.put(key,item.get(key)+Integer.parseInt(orders.get(i)[3]));
            }
            else{
                item.put(key,Integer.parseInt(orders.get(i)[3]));
            }
            key="";

        }
        //Here i tried to iterate over the hashMap in which the month+items and their total quantity sold in that month is stored
        //i then found the item having most quantity sold

        int[] best= new int[3];
        String[] bestItem = new String[3];
        for (Map.Entry<String, Integer> val : item.entrySet()) {
            if(val.getKey().split("-")[0].equals("01")){
                if(best[0]<val.getValue()) {
                    best[0] = val.getValue();
                    bestItem[0] = val.getKey().split("-")[1];
                }
            }

            if(val.getKey().split("-")[0].equals("02")){
                if(best[1]<val.getValue()) {
                    best[1] = val.getValue();
                    bestItem[1] = val.getKey().split("-")[1];
                }
            }

            if(val.getKey().split("-")[0].equals("03")){
                if(best[2]<val.getValue()) {
                    best[2] = val.getValue();
                    bestItem[2] = val.getKey().split("-")[1];
                }
            }
        }
        System.out.println("Most Popular Item of month 01 is:"+ bestItem[0] +" with quantity sold = " + best[0]+" units");
        System.out.println("Most Popular Item of month 02 is:"+ bestItem[1] +" with quantity sold = " + best[1]+" units");
        System.out.println("Most Popular Item of month 03 is:"+ bestItem[2] +" with quantity sold = " + best[2]+" units");
    }

    // Items generating most revenue per month=>
    //Almost same approach as mostPopularItem
    static void mostRevenuePerMonth(ArrayList<String[]>orders){
        String[] str = new String[3];
        HashMap<String,Integer> item = new HashMap<String, Integer>();
        String key ="";
        for(int i=0;i<orders.size();i++){
            str = orders.get(i)[0].split("-");
            key += str[1];
            key += "-";
            key += orders.get(i)[1];


            if(item.containsKey(key)){
                item.put(key,item.get(key)+Integer.parseInt(orders.get(i)[4]));
            }
            else{
                item.put(key,Integer.parseInt(orders.get(i)[4]));
            }
            key="";

        }
        int[] best= new int[3];
        String[] bestItem = new String[3];
        for (Map.Entry<String, Integer> val : item.entrySet()){
            if(val.getKey().split("-")[0].equals("01")){
                if(best[0]<val.getValue()) {
                    best[0] = val.getValue();
                    bestItem[0] = val.getKey().split("-")[1];
                }
            }

            if(val.getKey().split("-")[0].equals("02")){
                if(best[1]<val.getValue()) {
                    best[1] = val.getValue();
                    bestItem[1] = val.getKey().split("-")[1];
                }
            }

            if(val.getKey().split("-")[0].equals("03")){
                if(best[2]<val.getValue()) {
                    best[2] = val.getValue();
                    bestItem[2] = val.getKey().split("-")[1];
                }
            }
        }
        System.out.println("Most Revenue generated by Item in month 01 is:"+ bestItem[0] +" with total Revenue = " + best[0]+" Rs.");
        System.out.println("Most Revenue generated by Item in month 02 is:"+ bestItem[1] +" with total Revenue = " + best[1]+" Rs.");
        System.out.println("Most Revenue generated by Item in month 03 is:"+ bestItem[2] +" with total Revenue= " + best[2]+" Rs.");
    }

    // I was skeptical about this question because i was not properly able to understand the question.
    //Below i found minimum quantity ordered at a time & maximum quantity ordered at a time & average quantity ordered each time an order is placed
    //[Average = total quantity ordered/number of times the order is placed]
    //everything is for most Popular item

    static void MinMaxAvg(ArrayList<String[]>orders){
        String[] str = new String[3];
        HashMap<String,Integer> item = new HashMap<String, Integer>();
        String key ="";
        for(int i=0;i<orders.size();i++){
            str = orders.get(i)[0].split("-");
            key += str[1];
            key += "-";
            key += orders.get(i)[1];


            if(item.containsKey(key)){
                item.put(key,item.get(key)+Integer.parseInt(orders.get(i)[3]));
            }
            else{
                item.put(key,Integer.parseInt(orders.get(i)[3]));
            }
            key="";

        }
        int[] best= new int[3];
        String[] bestItem = new String[3];
        for (Map.Entry<String, Integer> val : item.entrySet()) {
            if(val.getKey().split("-")[0].equals("01")){
                if(best[0]<val.getValue()) {
                    best[0] = val.getValue();
                    bestItem[0] = val.getKey().split("-")[1];
                }
            }

            if(val.getKey().split("-")[0].equals("02")){
                if(best[1]<val.getValue()) {
                    best[1] = val.getValue();
                    bestItem[1] = val.getKey().split("-")[1];
                }
            }

            if(val.getKey().split("-")[0].equals("03")){
                if(best[2]<val.getValue()) {
                    best[2] = val.getValue();
                    bestItem[2] = val.getKey().split("-")[1];
                }
            }
        }
        int[] min = new int[3];
        min[0] = Integer.MAX_VALUE;
        min[1] = Integer.MAX_VALUE;
        min[2] = Integer.MAX_VALUE;
        int[] max = new int[3];
        int[] sum = new int[3];
        int[] count = new int[3];
        for(int i=0;i<orders.size();i++){
            if(orders.get(i)[0].split("-")[1].equals("01")) {
                if (orders.get(i)[1].equals(bestItem[0])) {
                    if (min[0] > Integer.parseInt(orders.get(i)[3])) {
                        min[0] = Integer.parseInt(orders.get(i)[3]);
                    }
                    if (Integer.parseInt(orders.get(i)[3]) > max[0]) {
                        max[0] = Integer.parseInt(orders.get(i)[3]);
                    }

                    sum[0] += Integer.parseInt(orders.get(i)[3]);
                    count[0]++;
                }
            }
            if(orders.get(i)[0].split("-")[1].equals("02")) {
                if (orders.get(i)[1].equals(bestItem[1])) {
                    if (min[1] > Integer.parseInt(orders.get(i)[3])) {
                        min[1] = Integer.parseInt(orders.get(i)[3]);
                    }
                    if (Integer.parseInt(orders.get(i)[3]) > max[1]) {
                        max[1] = Integer.parseInt(orders.get(i)[3]);
                    }

                    sum[1] += Integer.parseInt(orders.get(i)[3]);
                    count[1]++;
                }
            }

            if(orders.get(i)[0].split("-")[1].equals("03")) {
                if (orders.get(i)[1].equals(bestItem[2])) {
                    if (min[2] > Integer.parseInt(orders.get(i)[3])) {
                        min[2] = Integer.parseInt(orders.get(i)[3]);
                    }
                    if (Integer.parseInt(orders.get(i)[3]) > max[2]) {
                        max[2] = Integer.parseInt(orders.get(i)[3]);
                    }

                    sum[2] += Integer.parseInt(orders.get(i)[3]);
                    count[2]++;
                }
            }
        }
        System.out.println("Month 01 data of most popular item:"+bestItem[0]);
        System.out.println("Minimum quantity ordered:"+min[0]);
        System.out.println("Maximum quantity ordered:"+max[0]);
        System.out.println("Total sales:"+sum[0]);
        System.out.println("Total orders:"+count[0]);
        System.out.println("Average number of order:"+ (float)sum[0]/(float)count[0]);
        System.out.println();
        System.out.println("Month 02 data of most popular item:"+bestItem[1]);
        System.out.println("Minimum quantity ordered:"+min[1]);
        System.out.println("Maximum quantity ordered:"+max[1]);
        System.out.println("Total sales:"+sum[1]);
        System.out.println("Total orders:"+count[1]);
        System.out.println("Average number of order:"+ (float)sum[1]/(float)count[1]);
        System.out.println();
        System.out.println("Month 03 data of most popular item:"+bestItem[2]);
        System.out.println("Minimum quantity ordered:"+min[2]);
        System.out.println("Maximum quantity ordered:"+max[2]);
        System.out.println("Total sales:"+sum[2]);
        System.out.println("Total orders:"+count[2]);
        System.out.println("Average quantity ordered per order:"+ (float)sum[2]/(float)count[2]);
    }
}
